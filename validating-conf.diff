diff --git a/balancer/drivers/base_driver.py b/balancer/drivers/base_driver.py
index fa6ed68..449f418 100755
--- a/balancer/drivers/base_driver.py
+++ b/balancer/drivers/base_driver.py
@@ -120,6 +120,7 @@ class BaseDriver(object):
     def finalize_config(self):
         pass
 
+
 def is_sequence(arg):
     return (not hasattr(arg, "strip") and
             hasattr(arg, "__getitem__") or
diff --git a/balancer/drivers/haproxy/HaproxyDriver.py b/balancer/drivers/haproxy/HaproxyDriver.py
index a1de796..0941813 100755
--- a/balancer/drivers/haproxy/HaproxyDriver.py
+++ b/balancer/drivers/haproxy/HaproxyDriver.py
@@ -126,41 +126,25 @@ class HaproxyDriver(BaseDriver):
                     self.del_lines)
             config_file.add_lines_to_backend_block(haproxy_serverfarm,
                     self.new_lines)
-
+    '''
+        For compatibility with drivers for other devices
+    '''
     def create_real_server(self, rserver):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def delete_real_server(self, rserver):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def create_probe(self, probe):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def delete_probe(self, probe):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def create_stickiness(self, sticky):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def delete_stickiness(self, sticky):
-        '''
-            For compatibility with drivers for other devices
-        '''
         pass
 
     def add_real_server_to_server_farm(self, serverfarm, rserver):
@@ -213,14 +197,6 @@ class HaproxyDriver(BaseDriver):
         config_file = self._get_config()
         config_file.add_frontend(haproxy_virtualserver, haproxy_serverfarm)
 
-        """
-        Do we need validation per 1 action?
-        """
-        """
-        remote.put_config()
-        remote.validate_config()
-        """
-
     def delete_virtual_ip(self, virtualserver):
         logger.debug('[HAPROXY] delete VIP')
         if not bool(virtualserver['id']):
@@ -233,9 +209,9 @@ class HaproxyDriver(BaseDriver):
         #Check ip for using in the another frontend
         if not config_file.find_string_in_the_block('frontend',
             haproxy_virtualserver.bind_address):
-            logger.debug('[HAPROXY] ip %s does not using in the other '
-                                 'frontend, delete it from remote interface' %
-                                  haproxy_virtualserver.bind_address)
+            logger.debug('[HAPROXY] ip %s is not used in any '
+                         'frontend, deleting it from remote interface' %
+                         haproxy_virtualserver.bind_address)
             remote_interface = RemoteInterface(self.device_ref,
                                                haproxy_virtualserver)
             remote_interface.del_ip()
@@ -319,18 +295,24 @@ class HaproxyDriver(BaseDriver):
         haproxy_serverfarm = HaproxyBackend()
         haproxy_serverfarm.name = serverfarm['id']
 
+        config_file = self._get_config()
+        config_file.delete_block(haproxy_serverfarm)
+
     """
-       Putting config back
+       Putting config back on device
     """
     def finalize_config(self):
         if not self.config_was_deployed:
+            logger.debug("[HAPROXY] Deploying configuration")
             remote = RemoteConfig(self.device_ref, self.localpath,
                                   self.remotepath, self.configfilename)
             remote.put_config()
-            self.config_was_deployed = True
-            logger.debug("DEPLOYING CONFIG")
-        else:
-            logger.debug("NOT DEPLOYING CONFIG")
+            if remote.validate_config():
+                self.config_was_deployed = True
+            else:
+                logger.error('[HAPROXY] Configurations has failed validation')
+                return False
+        return True
 
 
 class HaproxyConfigBlock:
diff --git a/balancer/drivers/haproxy/RemoteControl.py b/balancer/drivers/haproxy/RemoteControl.py
index f917649..54b43b5 100755
--- a/balancer/drivers/haproxy/RemoteControl.py
+++ b/balancer/drivers/haproxy/RemoteControl.py
@@ -17,7 +17,8 @@ class RemoteConfig(object):
         self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
 
     def get_config(self):
-        logger.debug('[HAPROXY] get config from remote server %s/%s to %s/%s' %
+        logger.debug('[HAPROXY] copying config from the '
+                     'remote server %s/%s to %s/%s' %
                       (self.remotepath, self.configfilename,
                        self.localpath, self.configfilename))
         self.ssh.connect(self.host, username=self.user, password=self.password)
@@ -29,7 +30,7 @@ class RemoteConfig(object):
         return True
 
     def put_config(self):
-        logger.debug('[HAPROXY] put configuration to remote server')
+        logger.debug('[HAPROXY] copying configuration to the remote server')
         self.ssh.connect(self.host, username=self.user, password=self.password)
         sftp = self.ssh.open_sftp()
         sftp.put('%s/%s' % (self.localpath, self.configfilename),
@@ -42,7 +43,7 @@ class RemoteConfig(object):
 
     def validate_config(self):
         '''
-            Validate conifig and restart haproxy
+            Validate config and restart haproxy
         '''
         self.ssh.connect(self.host, username=self.user, password=self.password)
         stdin, stdout, stderr = self.ssh.exec_command('haproxy -c -f %s/%s' %
@@ -52,7 +53,7 @@ class RemoteConfig(object):
                          ssh_out.find('Configuration file is valid')))
         if 'Configuration file is valid' in ssh_out:
             logger.debug('[HAPROXY] remote configuration is valid, '
-                          'restart haproxy')
+                          'restarting haproxy')
             self.ssh.exec_command('sudo service haproxy restart')
             return True
         else:
@@ -104,7 +105,7 @@ class RemoteInterface(object):
 
     def add_ip(self):
         self.ssh.connect(self.host, username=self.user, password=self.password)
-        logger.debug('[HAPROXY] try add IP-%s to inteface %s' %
+        logger.debug('[HAPROXY] trying to add IP-%s to inteface %s' %
                                 (self.IP,  self.interface))
         stdin, stdout, stderr = self.ssh.exec_command('ip addr show dev %s' %
                                 self.interface)
@@ -112,7 +113,7 @@ class RemoteInterface(object):
         if ssh_out.find(self.IP) < 0:
             self.ssh.exec_command('sudo ip addr add %s/32 dev %s' %
                                                 (self.IP, self.interface))
-            logger.debug('[HAPROXY] remote add ip %s to inteface %s' %
+            logger.debug('[HAPROXY] added ip %s to inteface %s' %
                                               (self.IP, self.interface))
         else:
             logger.debug('[HAPROXY] remote ip %s is already configured on the \
